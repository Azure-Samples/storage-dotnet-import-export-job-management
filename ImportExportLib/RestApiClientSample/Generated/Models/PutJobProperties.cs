// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace StorageImportExport.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Specifies the properties of the job.
    /// </summary>
    public partial class PutJobProperties
    {
        /// <summary>
        /// Initializes a new instance of the PutJobProperties class.
        /// </summary>
        public PutJobProperties() { }

        /// <summary>
        /// Initializes a new instance of the PutJobProperties class.
        /// </summary>
        public PutJobProperties(string location, string storageAccountName, JobType? type, string storageAccountKey = default(string), string containerSas = default(string), string friendlyName = default(string), string description = default(string), string metadata = default(string), ReturnAddress returnAddress = default(ReturnAddress), ReturnShipping returnShipping = default(ReturnShipping), string importExportStatesPath = default(string), bool? enableVerboseLog = default(bool?), bool? backupDriveManifest = default(bool?))
        {
            Location = location;
            StorageAccountName = storageAccountName;
            StorageAccountKey = storageAccountKey;
            ContainerSas = containerSas;
            Type = type;
            FriendlyName = friendlyName;
            Description = description;
            Metadata = metadata;
            ReturnAddress = returnAddress;
            ReturnShipping = returnShipping;
            ImportExportStatesPath = importExportStatesPath;
            EnableVerboseLog = enableVerboseLog;
            BackupDriveManifest = backupDriveManifest;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Location")]
        public string Location { get; set; }

        /// <summary>
        /// The storage account name.
        /// </summary>
        [JsonProperty(PropertyName = "StorageAccountName")]
        public string StorageAccountName { get; set; }

        /// <summary>
        /// The storage account key. One of StorageAccountKey or ContainerSas
        /// must be included.
        /// </summary>
        [JsonProperty(PropertyName = "StorageAccountKey")]
        public string StorageAccountKey { get; set; }

        /// <summary>
        /// The container SAS to be used to import or export data to or from
        /// the storage account. One of StorageAccountKey or ContainerSas
        /// must be included.
        /// </summary>
        [JsonProperty(PropertyName = "ContainerSas")]
        public string ContainerSas { get; set; }

        /// <summary>
        /// Indicates whether this is an import job or an export job. .
        /// Possible values include: 'Import', 'Export'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public JobType? Type { get; set; }

        /// <summary>
        /// A human-readable name for the job. May contain Unicode characters
        /// and spaces.
        /// </summary>
        [JsonProperty(PropertyName = "FriendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// A human-readable description of the job. The description may be up
        /// to 1024 characters.
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// Metadata associated with the job. The metadata may be up to 1024
        /// characters.
        /// </summary>
        [JsonProperty(PropertyName = "Metadata")]
        public string Metadata { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReturnAddress")]
        public ReturnAddress ReturnAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReturnShipping")]
        public ReturnShipping ReturnShipping { get; set; }

        /// <summary>
        /// The virtual blob directory to which the copy logs and backups of
        /// drive manifest files (if enabled) will be stored.
        /// </summary>
        [JsonProperty(PropertyName = "ImportExportStatesPath")]
        public string ImportExportStatesPath { get; set; }

        /// <summary>
        /// Indicates whether verbose logging will be enabled.
        /// </summary>
        [JsonProperty(PropertyName = "EnableVerboseLog")]
        public bool? EnableVerboseLog { get; set; }

        /// <summary>
        /// Indicates whether the manifest files on the drives should be
        /// copied to block blobs.
        /// </summary>
        [JsonProperty(PropertyName = "BackupDriveManifest")]
        public bool? BackupDriveManifest { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (StorageAccountName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageAccountName");
            }
            if (this.ReturnAddress != null)
            {
                this.ReturnAddress.Validate();
            }
            if (this.ReturnShipping != null)
            {
                this.ReturnShipping.Validate();
            }
        }
    }
}
