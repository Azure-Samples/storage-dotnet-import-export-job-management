// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace StorageImportExport.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Contains information about the package being shipped by the customer
    /// to the Microsoft data center.
    /// </summary>
    public partial class PackageInfomation
    {
        /// <summary>
        /// Initializes a new instance of the PackageInfomation class.
        /// </summary>
        public PackageInfomation() { }

        /// <summary>
        /// Initializes a new instance of the PackageInfomation class.
        /// </summary>
        public PackageInfomation(string carrierName, string trackingNumber, int driveCount, string shipDate)
        {
            CarrierName = carrierName;
            TrackingNumber = trackingNumber;
            DriveCount = driveCount;
            ShipDate = shipDate;
        }

        /// <summary>
        /// The name of the carrier that is used to ship the import or export
        /// drives.
        /// </summary>
        [JsonProperty(PropertyName = "CarrierName")]
        public string CarrierName { get; set; }

        /// <summary>
        /// The tracking number of the package.
        /// </summary>
        [JsonProperty(PropertyName = "TrackingNumber")]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The number of drives included in the package.
        /// </summary>
        [JsonProperty(PropertyName = "DriveCount")]
        public int DriveCount { get; set; }

        /// <summary>
        /// The date when the package is shipped.
        /// </summary>
        [JsonProperty(PropertyName = "ShipDate")]
        public string ShipDate { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (CarrierName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CarrierName");
            }
            if (TrackingNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TrackingNumber");
            }
            if (ShipDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipDate");
            }
        }
    }
}
